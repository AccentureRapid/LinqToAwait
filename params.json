{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## LinqToAwait\r\n\r\nIn a world where many methods return `Task<T>` or other Awaitable types\r\n(especially in WinRT), LINQ can't be used nearly as easily. Enter LinqToAwait:\r\n\r\n```\r\nusing System;\r\nusing System.Reactive.Linq;\r\nusing LinqToAwait;\r\n\r\nvar inputs = new[] { \r\n    \"http://www.google.com\", \r\n    \"http://www.yahoo.com\", \r\n    \"http://www.aol.com\", \r\n};\r\n\r\nIEnumerable<string> results = await inputs.AsAsync()\r\n    .WhereAsync(async x => await IsPageInTop10WebSitesByTrafficAsync(x))\r\n    .SelectAsync(async x => await DownloadPageAsync(x))\r\n    .Select(x => x.Substring(0, 50))\r\n    .GetResults();\r\n\r\n>>> [\"<html>....\"]\r\n```\r\n\r\n### Where does this work?\r\n\r\nYou're going to need Visual Studio 2012 - you can use LinqToAwait with .NET 4.5 applications.\r\n\r\n### Hey, isn't this kind of like Rx?\r\n\r\nIt **is** Rx! However, it is a simplification of the API used for a more\r\nspecific use-case. Instead of choosing async/await *or* Rx, LinqToAwait helps\r\nyou use both at the same time, applying the most straightforward technique for\r\nthe particular problem.\r\n\r\n### How do I get started?\r\n\r\nIt's .NET, how else? [Use NuGet!](http://nuget.org/packages/linqtoawait).\r\n```\r\nInstall-Package LinqToAwait\r\n```","google":"","name":"LinqToAwait","tagline":"A Task-based LINQ designed to work with async/await"}